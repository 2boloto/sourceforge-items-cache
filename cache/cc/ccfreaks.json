{"_id": "51295479b9363c5586345dfb", "categories": {"audience": [{"fullname": "Science/Research", "fullpath": "Intended Audience :: by Industry or Sector :: Science/Research", "id": 367, "shortname": "scienceresearch"}, {"fullname": "Developers", "fullpath": "Intended Audience :: by End-User Class :: Developers", "id": 3, "shortname": "developers"}], "database": [], "developmentstatus": [{"fullname": "3 - Alpha", "fullpath": "Development Status :: 3 - Alpha", "id": 9, "shortname": "alpha"}], "environment": [], "language": [{"fullname": "Java", "fullpath": "Programming Language :: Java", "id": 198, "shortname": "java"}], "license": [], "os": [], "topic": [{"fullname": "Algorithms", "fullpath": "Topic :: Software Development :: Algorithms", "id": 620, "shortname": "algorithms"}], "translation": []}, "creation_date": "2013-02-23", "developers": [{"name": "Pedro Ramalhete", "url": "http://sourceforge.net/u/pramalhe/", "username": "pramalhe"}], "external_homepage": "http://www.concurrencyfreaks.com", "icon_url": null, "labels": [""], "moved_to_url": "", "name": "Concurrency Freaks", "preferred_support_tool": "tickets", "preferred_support_url": "", "private": false, "screenshots": [{"caption": "Performance comparison for of different locks protecting a 16 int array", "thumbnail_url": "http://sourceforge.net/p/ccfreaks/screenshot/ccf-0-4threads.gif/thumb", "url": "http://sourceforge.net/p/ccfreaks/screenshot/ccf-0-4threads.gif"}, {"caption": "Performance comparison for 0.1% writes on AWS instance", "thumbnail_url": "http://sourceforge.net/p/ccfreaks/screenshot/Writer%201%20permil.gif/thumb", "url": "http://sourceforge.net/p/ccfreaks/screenshot/Writer%201%20permil.gif"}, {"caption": "Performance comparison for 2% writes on AWS instance", "thumbnail_url": "http://sourceforge.net/p/ccfreaks/screenshot/Writer%202%20percent.gif/thumb", "url": "http://sourceforge.net/p/ccfreaks/screenshot/Writer%202%20percent.gif"}, {"caption": "Performance comparison for 50% Writes on an array with 32 ints", "thumbnail_url": "http://sourceforge.net/p/ccfreaks/screenshot/Writes-50.png/thumb", "url": "http://sourceforge.net/p/ccfreaks/screenshot/Writes-50.png"}, {"caption": "Performance comparison for 1% Writes on an array with 32 ints", "thumbnail_url": "http://sourceforge.net/p/ccfreaks/screenshot/Writes-1.png/thumb", "url": "http://sourceforge.net/p/ccfreaks/screenshot/Writes-1.png"}, {"caption": "Performance comparison for 0.1% Writes on an array with 32 ints", "thumbnail_url": "http://sourceforge.net/p/ccfreaks/screenshot/Writes-01.png/thumb", "url": "http://sourceforge.net/p/ccfreaks/screenshot/Writes-01.png"}], "short_description": "This library contains Java code for several Read-Write Locks:\r\n- ScalableRWLock: A rw-lock that scales with the number of threads doing read-lock.\r\n- ScalableRWLockS: Similar to above but different implementation.\r\n- ScalableStampedRWLock: An hybrid of the ScalableRWLock and the StampedLock provided in JDK 8, which provides good overall performance.\r\n- FAARWLock: Uses a Fetch-And-Add operation for the read-lock which means it is not so scalable as ScalableRWLock but it is still faster than classical implementations", "shortname": "ccfreaks", "socialnetworks": [{"accounturl": "", "socialnetwork": "Twitter"}], "status": "active", "summary": "A library with Scalable (and fast) Read-Write locks", "tools": [{"label": "Wiki", "mount_point": "wiki", "name": "wiki"}, {"label": "Files", "mount_point": "files", "name": "files"}, {"label": "Tickets", "mount_point": "tickets", "name": "tickets"}, {"label": "Discussion", "mount_point": "discussion", "name": "discussion"}, {"label": "Code", "mount_point": "code", "name": "hg"}, {"label": "Summary", "mount_point": "summary", "name": "summary", "sourceforge_group_id": 1306488}, {"label": "Reviews", "mount_point": "reviews", "name": "reviews"}, {"label": "Support", "mount_point": "support", "name": "support"}, {"label": "Activity", "mount_point": "activity", "name": "activity"}], "url": "http://sourceforge.net/p/ccfreaks/", "video_url": ""}
