{"_id": "539794f285540d262aa698bd", "categories": {"audience": [{"fullname": "Developers", "fullpath": "Intended Audience :: by End-User Class :: Developers", "id": 3, "shortname": "developers"}], "database": [], "developmentstatus": [{"fullname": "5 - Production/Stable", "fullpath": "Development Status :: 5 - Production/Stable", "id": 11, "shortname": "production"}], "environment": [], "language": [{"fullname": "Java", "fullpath": "Programming Language :: Java", "id": 198, "shortname": "java"}], "license": [{"fullname": "BSD License", "fullpath": "License :: OSI-Approved Open Source :: BSD License", "id": 187, "shortname": "bsd"}], "os": [], "topic": [{"fullname": "Libraries", "fullpath": "Topic :: Software Development :: Libraries", "id": 770, "shortname": "softdevlibraries"}], "translation": []}, "creation_date": "2014-06-10", "developers": [{"name": "Jeffrey Smith", "url": "http://sourceforge.net/u/xtarka/", "username": "xtarka"}], "external_homepage": "http://javalambdacompose.sourceforge.net", "icon_url": null, "labels": ["lambda", "function", "functional", "interface", "compose", "composition", "generic", "double", "long", "int", "java", "source", "library", "utility", "method", "functional interface", "stream", "collection", "iterable", "comparator", "list", "UnaryOperator", "Consumer", "Predicate", "Function", "Functional Interface", "Single Abstract Method", "forEach", "for", "for each", "each"], "moved_to_url": "", "name": "JavaLambdaCompose", "preferred_support_tool": "_members", "preferred_support_url": "", "private": false, "screenshots": [], "short_description": "Provides for composing functional lambda instances to improve run-time efficiency and flexibility. The composition avoids excessive call stacking when processing multiple Predicate or Consumer instances, and can avoid the processing overhead of Collection.stream().filter().forEach() by replacing with Collection.forEach() using a composed Consumer from a Predicate and Consumer.\r\n\r\nIncludes utility methods for composing an Iterable or array of Predicate instances into a single Predicate instance for testing for all, any, or none of the Predicate results. \r\n\r\nIncludes utility methods for composing an Iterable or array of Consumer instances into a single Consumer instance. \r\n\r\nIncludes utility methods for composing an Iterable or array of Predicate instances with an Iterable or array of Consumer instances into a single Consumer that tests for all, any, or none of the Predicate results.\r\n\r\nIncludes a utility method for using streams to split a Collection according to comparators.", "shortname": "javalambdacompose", "socialnetworks": [{"accounturl": "", "socialnetwork": "Twitter"}, {"accounturl": null, "socialnetwork": "Facebook"}], "status": "active", "summary": "Utility methods for composing functional lambda expressions", "tools": [{"label": "Activity", "mount_point": "activity", "name": "activity"}, {"label": "Files", "mount_point": "files", "name": "files"}, {"label": "Summary", "mount_point": "summary", "name": "summary", "sourceforge_group_id": 2256140}, {"label": "Reviews", "mount_point": "reviews", "name": "reviews"}, {"label": "Support", "mount_point": "support", "name": "support"}, {"label": "Wiki", "mount_point": "wiki", "name": "wiki"}, {"label": "Code", "mount_point": "code", "name": "git"}, {"label": "Tickets", "mount_point": "tickets", "name": "tickets"}, {"label": "Discussion", "mount_point": "discussion", "name": "discussion"}], "url": "http://sourceforge.net/p/javalambdacompose/", "video_url": null}
