{"status": "active", "external_homepage": "http://javalambdacompose.sourceforge.net", "developers": [{"url": "http://sourceforge.net/u/xtarka/", "username": "xtarka", "name": "Jeffrey Smith"}], "screenshots": [], "name": "JavaLambdaCompose", "preferred_support_tool": "_members", "preferred_support_url": "", "icon_url": null, "labels": ["lambda", "function", "functional", "interface", "compose", "composition", "generic", "double", "long", "int", "java", "source", "library", "utility", "method", "functional interface", "stream", "collection", "iterable", "comparator", "list", "UnaryOperator", "Consumer", "Predicate", "Function", "Functional Interface", "Single Abstract Method", "forEach", "for", "for each", "each"], "video_url": null, "private": false, "creation_date": "2014-06-10", "url": "http://sourceforge.net/p/javalambdacompose/", "socialnetworks": [{"accounturl": "", "socialnetwork": "Twitter"}, {"accounturl": null, "socialnetwork": "Facebook"}], "short_description": "Provides for composing functional lambda instances to improve run-time efficiency and flexibility. The composition avoids excessive call stacking when processing multiple Predicate or Consumer instances, and can avoid the processing overhead of Collection.stream().filter().forEach() by replacing with Collection.forEach() using a composed Consumer from a Predicate and Consumer.\r\n\r\nIncludes utility methods for composing an Iterable or array of Predicate instances into a single Predicate instance for testing for all, any, or none of the Predicate results. \r\n\r\nIncludes utility methods for composing an Iterable or array of Consumer instances into a single Consumer instance. \r\n\r\nIncludes utility methods for composing an Iterable or array of Predicate instances with an Iterable or array of Consumer instances into a single Consumer that tests for all, any, or none of the Predicate results.\r\n\r\nIncludes a utility method for using streams to split a Collection according to comparators.", "moved_to_url": "", "shortname": "javalambdacompose", "_id": "539794f285540d262aa698bd", "tools": [{"mount_point": "activity", "name": "activity", "label": "Activity"}, {"mount_point": "files", "name": "files", "label": "Files"}, {"sourceforge_group_id": 2256140, "mount_point": "summary", "name": "summary", "label": "Summary"}, {"mount_point": "reviews", "name": "reviews", "label": "Reviews"}, {"mount_point": "support", "name": "support", "label": "Support"}, {"mount_point": "wiki", "name": "wiki", "label": "Wiki"}, {"mount_point": "code", "name": "git", "label": "Code"}, {"mount_point": "tickets", "name": "tickets", "label": "Tickets"}, {"mount_point": "discussion", "name": "discussion", "label": "Discussion"}], "summary": "Utility methods for composing functional lambda expressions", "categories": {"developmentstatus": [{"fullpath": "Development Status :: 5 - Production/Stable", "shortname": "production", "fullname": "5 - Production/Stable", "id": 11}], "topic": [{"fullpath": "Topic :: Software Development :: Libraries", "shortname": "softdevlibraries", "fullname": "Libraries", "id": 770}], "language": [{"fullpath": "Programming Language :: Java", "shortname": "java", "fullname": "Java", "id": 198}], "license": [{"fullpath": "License :: OSI-Approved Open Source :: BSD License", "shortname": "bsd", "fullname": "BSD License", "id": 187}], "database": [], "environment": [], "audience": [{"fullpath": "Intended Audience :: by End-User Class :: Developers", "shortname": "developers", "fullname": "Developers", "id": 3}], "translation": [], "os": []}}
