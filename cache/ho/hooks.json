{"status": "active", "external_homepage": null, "developers": [{"url": "http://sourceforge.net/u/borrisholt/", "username": "borrisholt", "name": "Jens Borrisholt"}], "screenshots": [], "name": "Hooks", "preferred_support_tool": "tickets", "preferred_support_url": "", "icon_url": null, "labels": [], "video_url": "", "private": false, "creation_date": "2013-06-02", "url": "http://sourceforge.net/p/hooks/", "socialnetworks": [{"accounturl": "", "socialnetwork": "Twitter"}], "short_description": "Hooks, I\u2019ve seen a lot of people trying to make a clean solution for hooking messages in an application. So I decided some time ago to implement hooks as a class, with nice events and stuff :)\r\n\r\nHook.pas makes it possible to assign a method pointer to a procedure pointer (with some help from assembler).\r\n\r\nFor example: if you want to trap ALL keystrokes in your application - simply declare an instance of TKeyboardHook, assign an event handler for OnPreExecute or OnPostExecute, or both. Set you KeyboadHook active (KeyboardHook.Active := True) and you are out and running ..\r\n\r\n", "moved_to_url": "", "shortname": "hooks", "_id": "51aae104c4d1047595ee22e7", "tools": [{"sourceforge_group_id": 1839246, "mount_point": "summary", "name": "summary", "label": "Summary"}, {"mount_point": "files", "name": "files", "label": "Files"}, {"mount_point": "reviews", "name": "reviews", "label": "Reviews"}, {"mount_point": "support", "name": "support", "label": "Support"}, {"mount_point": "wiki", "name": "wiki", "label": "Wiki"}, {"mount_point": "code", "name": "git", "label": "Code"}, {"mount_point": "tickets", "name": "tickets", "label": "Tickets"}, {"mount_point": "discussion", "name": "discussion", "label": "Discussion"}, {"mount_point": "code-0", "name": "svn", "label": "Code"}], "summary": "Keyboardhook and Mousehook in an easy way!", "categories": {"developmentstatus": [], "topic": [], "language": [], "license": [], "database": [], "environment": [], "audience": [], "translation": [], "os": []}}
