{"_id": "51aae104c4d1047595ee22e7", "categories": {"audience": [], "database": [], "developmentstatus": [], "environment": [], "language": [], "license": [], "os": [], "topic": [], "translation": []}, "creation_date": "2013-06-02", "developers": [{"name": "Jens Borrisholt", "url": "http://sourceforge.net/u/borrisholt/", "username": "borrisholt"}], "external_homepage": null, "icon_url": null, "labels": [], "moved_to_url": "", "name": "Hooks", "preferred_support_tool": "tickets", "preferred_support_url": "", "private": false, "screenshots": [], "short_description": "Hooks, I\u2019ve seen a lot of people trying to make a clean solution for hooking messages in an application. So I decided some time ago to implement hooks as a class, with nice events and stuff :)\r\n\r\nHook.pas makes it possible to assign a method pointer to a procedure pointer (with some help from assembler).\r\n\r\nFor example: if you want to trap ALL keystrokes in your application - simply declare an instance of TKeyboardHook, assign an event handler for OnPreExecute or OnPostExecute, or both. Set you KeyboadHook active (KeyboardHook.Active := True) and you are out and running ..\r\n\r\n", "shortname": "hooks", "socialnetworks": [{"accounturl": "", "socialnetwork": "Twitter"}], "status": "active", "summary": "Keyboardhook and Mousehook in an easy way!", "tools": [{"label": "Summary", "mount_point": "summary", "name": "summary", "sourceforge_group_id": 1839246}, {"label": "Files", "mount_point": "files", "name": "files"}, {"label": "Reviews", "mount_point": "reviews", "name": "reviews"}, {"label": "Support", "mount_point": "support", "name": "support"}, {"label": "Wiki", "mount_point": "wiki", "name": "wiki"}, {"label": "Code", "mount_point": "code", "name": "git"}, {"label": "Tickets", "mount_point": "tickets", "name": "tickets"}, {"label": "Discussion", "mount_point": "discussion", "name": "discussion"}, {"label": "Code", "mount_point": "code-0", "name": "svn"}], "url": "http://sourceforge.net/p/hooks/", "video_url": ""}
