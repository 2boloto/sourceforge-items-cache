{"_id": "506bdde371b75b110316ac51", "categories": {"audience": [{"fullname": "Developers", "fullpath": "Intended Audience :: by End-User Class :: Developers", "id": 3, "shortname": "developers"}], "database": [], "developmentstatus": [{"fullname": "5 - Production/Stable", "fullpath": "Development Status :: 5 - Production/Stable", "id": 11, "shortname": "production"}], "environment": [], "language": [{"fullname": "C++", "fullpath": "Programming Language :: C++", "id": 165, "shortname": "cpp"}, {"fullname": "C", "fullpath": "Programming Language :: C", "id": 164, "shortname": "c"}], "license": [{"fullname": "GNU Library or Lesser General Public License version 3.0 (LGPLv3)", "fullpath": "License :: OSI-Approved Open Source :: GNU Library or Lesser General Public License version 3.0 (LGPLv3)", "id": 680, "shortname": "lgplv3"}], "os": [{"fullname": "All POSIX (Linux/BSD/UNIX-like OSes)", "fullpath": "Operating System :: Grouping and Descriptive Categories :: All POSIX (Linux/BSD/UNIX-like OSes)", "id": 200, "shortname": "posix"}], "topic": [{"fullname": "Database Engines/Servers", "fullpath": "Topic :: Database :: Database Engines/Servers", "id": 67, "shortname": "engines"}], "translation": []}, "creation_date": "2010-05-10", "developers": [{"name": "Philip Ashmore", "url": "http://sourceforge.net/u/philipashmore/", "username": "philipashmore"}], "external_homepage": "http://meta-treedb.sourceforge.net", "icon_url": null, "labels": [], "moved_to_url": "", "name": "meta-treedb", "preferred_support_tool": "", "preferred_support_url": "", "private": false, "screenshots": [], "short_description": "meta-treedb can implement malloc functionality, and much more!\r\nNeed a heap that allocates of a fixed size chunk of memory? No problem.\r\nBut where treedb comes into its own is when it comes to allocating from a mmap()ed disk file - the memory becomes persistent.\r\n\r\nIf you follow the tests/examples, you too can store dictionaries, trees, lists or whatever you can think of in disk-based memory, just an open() and mmap() away.\r\n\r\nMeta-treedb comes with an AVL tree, doubly-linked-list and variable-entry-sized-array implementations for you to use in your data structures.\r\n\r\nSo, what distinguishes meta-treedb from treedb?\r\n* \"class\" interfaces for treedb collections\r\n   These are vtables (virtual function tables) that implement th interface.\r\n* faster compiles - only the \"class\" interfaces are visible to client code\r\n   This is at the expense of a small performance hit.\r\n* the ability to use implementations that were developed after client code was compiled.", "shortname": "meta-treedb", "socialnetworks": [], "status": "active", "summary": "on-disk memory library using meta-data", "tools": [{"label": "Summary", "mount_point": "summary", "name": "summary", "sourceforge_group_id": 321652}, {"label": "Files", "mount_point": "downloads", "name": "files"}, {"label": "Wiki", "mount_point": "wiki", "name": "wiki"}, {"label": "Code", "mount_point": "code", "name": "git"}, {"label": "Reviews", "mount_point": "reviews", "name": "reviews"}, {"label": "Support", "mount_point": "support", "name": "support"}], "url": "http://sourceforge.net/p/meta-treedb/", "video_url": ""}
