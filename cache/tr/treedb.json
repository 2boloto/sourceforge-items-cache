{"_id": "506bdde071b75b111e81b8a5", "categories": {"audience": [], "database": [], "developmentstatus": [], "environment": [], "language": [], "license": [], "os": [], "topic": [], "translation": []}, "creation_date": "2010-02-10", "developers": [{"name": "Philip Ashmore", "url": "http://sourceforge.net/u/philipashmore/", "username": "philipashmore"}], "external_homepage": "http://treedb.sourceforge.net", "icon_url": null, "labels": [], "moved_to_url": "", "name": "treedb", "preferred_support_tool": "wiki", "preferred_support_url": "", "private": false, "screenshots": [], "short_description": "treedb can implement malloc functionality, and much more!\r\nNeed a heap that allocates from a fixed size chunk of memory? No problem.\r\nBut where treedb comes into its own is when it comes to allocating from a mmap()ed disk file - the memory becomes persistent.\r\n\r\nIf you follow the tests/examples, you too can store dictionaries, trees, lists or whatever you can think of in disk-based memory, just an open() and mmap() away.\r\n\r\nTreedb comes with an AVL tree, doubly-linked-list and variable-entry sized-array implementations for you to use in your data structures.\r\n", "shortname": "treedb", "socialnetworks": [], "status": "active", "summary": "on-disk memory library", "tools": [{"label": "Summary", "mount_point": "summary", "name": "summary", "sourceforge_group_id": 304242}, {"label": "Wiki", "mount_point": "wiki", "name": "wiki"}, {"label": "Files", "mount_point": "downloads", "name": "files"}, {"label": "Code", "mount_point": "code", "name": "git"}, {"label": "Donate", "mount_point": "donate", "name": "link"}, {"label": "Reviews", "mount_point": "reviews", "name": "reviews"}, {"label": "Support", "mount_point": "support", "name": "support"}], "url": "http://sourceforge.net/p/treedb/", "video_url": ""}
