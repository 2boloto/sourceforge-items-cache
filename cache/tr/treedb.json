{"status": "active", "preferred_support_tool": "wiki", "preferred_support_url": "", "labels": [], "private": false, "creation_date": "2010-02-10", "socialnetworks": [], "tools": [{"sourceforge_group_id": 304242, "mount_point": "summary", "name": "summary", "label": "Summary"}, {"mount_point": "wiki", "name": "wiki", "label": "Wiki"}, {"mount_point": "downloads", "name": "files", "label": "Files"}, {"mount_point": "code", "name": "git", "label": "Code"}, {"mount_point": "donate", "name": "link", "label": "Donate"}, {"mount_point": "reviews", "name": "reviews", "label": "Reviews"}, {"mount_point": "support", "name": "support", "label": "Support"}], "categories": {"developmentstatus": [], "environment": [], "language": [], "license": [], "database": [], "topic": [], "audience": [], "translation": [], "os": []}, "_id": "506bdde071b75b111e81b8a5", "name": "treedb", "url": "http://sourceforge.net/p/treedb/", "icon_url": null, "video_url": "", "screenshots": [], "summary": "on-disk memory library", "short_description": "treedb can implement malloc functionality, and much more!\r\nNeed a heap that allocates from a fixed size chunk of memory? No problem.\r\nBut where treedb comes into its own is when it comes to allocating from a mmap()ed disk file - the memory becomes persistent.\r\n\r\nIf you follow the tests/examples, you too can store dictionaries, trees, lists or whatever you can think of in disk-based memory, just an open() and mmap() away.\r\n\r\nTreedb comes with an AVL tree, doubly-linked-list and variable-entry sized-array implementations for you to use in your data structures.\r\n", "moved_to_url": "", "shortname": "treedb", "developers": [{"url": "http://sourceforge.net/u/philipashmore/", "username": "philipashmore", "name": "Philip Ashmore"}], "external_homepage": "http://treedb.sourceforge.net"}
