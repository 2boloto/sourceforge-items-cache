{"_id": "514a1306e88f3d55f25cab7e", "categories": {"audience": [{"fullname": "Developers", "fullpath": "Intended Audience :: by End-User Class :: Developers", "id": 3, "shortname": "developers"}], "database": [], "developmentstatus": [{"fullname": "5 - Production/Stable", "fullpath": "Development Status :: 5 - Production/Stable", "id": 11, "shortname": "production"}], "environment": [], "language": [{"fullname": "Java", "fullpath": "Programming Language :: Java", "id": 198, "shortname": "java"}], "license": [{"fullname": "BSD License", "fullpath": "License :: OSI-Approved Open Source :: BSD License", "id": 187, "shortname": "bsd"}], "os": [{"fullname": "OS Independent (Written in an interpreted language)", "fullpath": "Operating System :: Grouping and Descriptive Categories :: OS Independent (Written in an interpreted language)", "id": 235, "shortname": "independent"}], "topic": [{"fullname": "Database", "fullpath": "Topic :: Database", "id": 66, "shortname": "database"}, {"fullname": "Software Development", "fullpath": "Topic :: Software Development", "id": 45, "shortname": "development"}], "translation": [{"fullname": "English", "fullpath": "Translations :: English", "id": 275, "shortname": "english"}]}, "creation_date": "2003-05-20", "developers": [{"name": "J. Groff", "url": "http://sourceforge.net/u/groffj/", "username": "groffj"}], "external_homepage": "http://treepool.sourceforge.net", "icon_url": null, "labels": [], "moved_to_url": "", "name": "Big Sack", "preferred_support_tool": "", "preferred_support_url": "", "private": false, "screenshots": [], "short_description": "Big Sack is a Java persistence mechanism that allows storage of key value pairs following the popular Big Data paradigms. Its a very simple and straightforward way to bridge the gap between in-memory data structures and long-term storage.  It has the convenience of Java SDK TreeMap and TreeSet classes and is used the same easy way, but it includes rollback through undo logging to checkpoint data so it does not wind up in an unknown state regardless of failures. Data storage in the exabyte range is possible using filesystem and/or memory-mapped IO. Three levels of configurable write-through caching at different granularities ensure performance.", "shortname": "treepool", "socialnetworks": [{"accounturl": "", "socialnetwork": "Twitter"}, {"accounturl": null, "socialnetwork": "Facebook"}], "status": "active", "summary": "Big Sack: A lightweight Java Key/Value store with undo and disk cache.", "tools": [{"label": "Summary", "mount_point": "summary", "name": "summary", "sourceforge_group_id": 81608}, {"label": "Support", "mount_point": "support", "name": "support"}, {"label": "Reviews", "mount_point": "reviews", "name": "reviews"}, {"label": "Files", "mount_point": "files", "name": "files"}, {"label": "Wiki", "mount_point": "wiki", "name": "wiki"}, {"label": "Activity", "mount_point": "activity", "name": "activity"}], "url": "http://sourceforge.net/p/treepool/", "video_url": ""}
