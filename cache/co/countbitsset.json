{"_id": "50429ca60594ca3d3e2c1c2a", "categories": {"audience": [{"fullname": "Developers", "fullpath": "Intended Audience :: by End-User Class :: Developers", "id": 3, "shortname": "developers"}], "database": [], "developmentstatus": [{"fullname": "5 - Production/Stable", "fullpath": "Development Status :: 5 - Production/Stable", "id": 11, "shortname": "production"}], "environment": [{"fullname": "Command-line", "fullpath": "User Interface :: Textual :: Command-line", "id": 459, "shortname": "ui_commandline"}], "language": [{"fullname": "C++", "fullpath": "Programming Language :: C++", "id": 165, "shortname": "cpp"}], "license": [{"fullname": "Public Domain", "fullpath": "License :: Public Domain", "id": 197, "shortname": "publicdomain"}], "os": [{"fullname": "OS Portable (Source code to work with many OS platforms)", "fullpath": "Operating System :: Grouping and Descriptive Categories :: OS Portable (Source code to work with many OS platforms)", "id": 436, "shortname": "os_portable"}], "topic": [{"fullname": "Algorithms", "fullpath": "Topic :: Software Development :: Algorithms", "id": 620, "shortname": "algorithms"}], "translation": []}, "creation_date": "2012-09-01", "developers": [{"name": "Danny Schneider", "url": "http://sourceforge.net/u/digitalus/", "username": "digitalus"}], "external_homepage": "", "icon_url": null, "labels": [], "moved_to_url": "", "name": "CountBitsSet", "preferred_support_tool": "", "preferred_support_url": "", "private": false, "screenshots": [{"caption": "Running Benchmark", "thumbnail_url": "http://sourceforge.net/p/countbitsset/screenshot/CQtQt5.1.1ToolsQtCreatorbinqtcreator_process_stub.png/thumb", "url": "http://sourceforge.net/p/countbitsset/screenshot/CQtQt5.1.1ToolsQtCreatorbinqtcreator_process_stub.png"}], "short_description": "I was curious how much better the Algorithms pointed out by BitTwiddling Hacks are than my simple Lookup Table approach...\r\nNow I think, perhaps my little investigation is interesting for others too...\r\nPS: the parallel counting Algo is about 2 times !!! faster on average on my computers than the LUT solution(s). Also this shows nicely how different a human brain compatible solution is to a binary machine optimal solution :-)", "shortname": "countbitsset", "socialnetworks": [], "status": "active", "summary": "minimal benchmark code for Counting Set Bits (ones) in an Integer", "tools": [{"label": "Files", "mount_point": "downloads", "name": "files"}, {"label": "Tickets", "mount_point": "tickets", "name": "tickets"}, {"label": "Code", "mount_point": "code", "name": "hg"}, {"label": "Summary", "mount_point": "summary", "name": "summary", "sourceforge_group_id": 878916}, {"label": "Reviews", "mount_point": "reviews", "name": "reviews"}, {"label": "Support", "mount_point": "support", "name": "support"}, {"label": "Activity", "mount_point": "activity", "name": "activity"}], "url": "http://sourceforge.net/p/countbitsset/", "video_url": ""}
