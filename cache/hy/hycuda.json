{"_id": "52b18cf1a02bb176a1a63e6b", "categories": {"audience": [], "database": [], "developmentstatus": [], "environment": [], "language": [], "license": [], "os": [], "topic": [], "translation": []}, "creation_date": "2013-12-18", "developers": [{"name": "Joren Heit", "url": "http://sourceforge.net/u/jorenheit/", "username": "jorenheit"}], "external_homepage": null, "icon_url": null, "labels": [], "moved_to_url": "", "name": "HyCuda", "preferred_support_tool": "_url", "preferred_support_url": "http://hycuda.sourceforge.com", "private": false, "screenshots": [], "short_description": "The HyCuda code-generator generates a template framework to easily compile different versions of a hybrid algorithm. When set up, you can switch between devices to execute part of the algorithm without having to worry about memory transfers. Based on a specification file that describes some properties of the algorithm, HyCuda generates C++11 header- and sourcefiles, only a few of which have to be modified by the programmer in order to implement the algorithm itself. \r\n\r\nThe generated code contains a lot of template metaprogramming (TMP), to make sure the decision for an algorithm to run on the CPU or GPU has already been made at compile-time. The same holds for the decisions whether or not to transfer data. This amounts to 0 runtime overhead.\r\n", "shortname": "hycuda", "socialnetworks": [{"accounturl": "", "socialnetwork": "Twitter"}, {"accounturl": null, "socialnetwork": "Facebook"}], "status": "active", "summary": "Hybrid Framework Generator for CUDA", "tools": [{"label": "Files", "mount_point": "files", "name": "files"}, {"label": "Support", "mount_point": "support", "name": "support"}, {"label": "Reviews", "mount_point": "reviews", "name": "reviews"}, {"label": "Summary", "mount_point": "summary", "name": "summary", "sourceforge_group_id": 2053065}, {"label": "Activity", "mount_point": "activity", "name": "activity"}], "url": "http://sourceforge.net/p/hycuda/", "video_url": ""}
