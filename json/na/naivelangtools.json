{"_id": "51a3a2890594ca046c26a8dc", "categories": {"audience": [{"fullname": "Developers", "fullpath": "Intended Audience :: by End-User Class :: Developers", "id": 3, "shortname": "developers"}], "database": [], "developmentstatus": [{"fullname": "5 - Production/Stable", "fullpath": "Development Status :: 5 - Production/Stable", "id": 11, "shortname": "production"}], "environment": [], "language": [{"fullname": "C#", "fullpath": "Programming Language :: C#", "id": 271, "shortname": "csharp"}], "license": [{"fullname": "MIT License", "fullpath": "License :: OSI-Approved Open Source :: MIT License", "id": 188, "shortname": "mit"}], "os": [], "topic": [{"fullname": "Compilers", "fullpath": "Topic :: Software Development :: Compilers", "id": 48, "shortname": "compilers"}, {"fullname": "Interpreters", "fullpath": "Topic :: Software Development :: Interpreters", "id": 49, "shortname": "interpreters"}], "translation": [{"fullname": "English", "fullpath": "Translations :: English", "id": 275, "shortname": "english"}]}, "creation_date": "2013-05-27", "developers": [{"name": "macias", "url": "http://sourceforge.net/u/me-macias/", "username": "me-macias"}], "external_homepage": "http://skila.pl", "icon_url": null, "labels": [], "moved_to_url": "", "name": "NaiveLanguageTools", "preferred_support_tool": "tickets", "preferred_support_url": "", "private": false, "screenshots": [], "short_description": "NLT is free, open-source C# lexer and GLR parser suite -- which translates to ability to parse ambiguous grammars. Grammar can be defined directly in code or (preferably) in separate file (lex/yacc-like) for included generator.\r\n\r\nIf you understand/guess the meaning of grammar in C#:\r\n\r\n  // scanning\r\n  lexer.AddStringRule(\")\", match => SymbolEnum.RPAREN);\r\n  // parsing\r\n  prod_builder.AddProduction(SymbolEnum.exp,\r\n                             SymbolEnum.LPAREN, SymbolEnum.exp, SymbolEnum.RPAREN,\r\n                             (_1, e, _3) => (AstNode)e);\r\n\r\nor grammar in NLT format:\r\n\r\n  // scanning\r\n  /[A-Za-z_][A-Za-z_0-9]*/ -> IDENTIFIER, IdentifierSymbol.Create($text);\r\n  // parsing\r\n  program -> list:namespace_list\r\n             { new Program(currCoords(), (Namespaces)list) };\r\n\r\nyou should be able to use it :-).\r\n\r\nThere is Example project included which serves as tutorial.", "shortname": "naivelangtools", "socialnetworks": [{"accounturl": "", "socialnetwork": "Twitter"}, {"accounturl": null, "socialnetwork": "Facebook"}], "status": "active", "summary": "C# lexer and parser", "tools": [{"label": "Files", "mount_point": "files", "name": "files"}, {"label": "Summary", "mount_point": "summary", "name": "summary", "sourceforge_group_id": 1806317}, {"label": "Reviews", "mount_point": "reviews", "name": "reviews"}, {"label": "Support", "mount_point": "support", "name": "support"}, {"label": "Wiki", "mount_point": "wiki", "name": "wiki"}, {"label": "Tickets", "mount_point": "tickets", "name": "tickets"}], "url": "http://sourceforge.net/p/naivelangtools/", "video_url": null}
